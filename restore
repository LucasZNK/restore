#!/bin/bash

# Interactive Git Restore Tool
# Description: Interactive arrow-navigable git commit browser and restore tool
# Version: 1.1.1

# Colors and formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'
BOLD='\033[1m'
DIM='\033[2m'

# Emojis and symbols
ARROW="‚Üí"
CURRENT_MARK="üî•"
FRESH_MARK="‚ú®"
COMMIT_MARK="üìù"
BRANCH_MARK="üåø"
TIME_MARK="‚è∞"

# Terminal control
clear_screen() {
    printf '\033[2J\033[H'
}

hide_cursor() {
    printf '\033[?25l'
}

show_cursor() {
    printf '\033[?25h'
}

move_cursor() {
    printf '\033[%d;%dH' "$1" "$2"
}

# Cleanup function
cleanup() {
    # Only restore terminal state if we're in interactive mode
    if [ -t 0 ]; then
        show_cursor
        stty echo 2>/dev/null
    fi
    exit 0
}

trap cleanup EXIT INT TERM

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
}

# Function to get commit data
get_commits() {
    # Simply get the last 20 commits from the current HEAD
    # This will show the linear history from wherever we are
    git log --oneline --format="%H|%h|%s|%ad|%an" --date=format:"%Y-%m-%d %H:%M" -20 2>/dev/null
}

# Function to get relative time
get_relative_time() {
    local commit_hash=$1
    git log -1 --format="%ar" "$commit_hash" 2>/dev/null
}

# Function to get current branch and commit info
get_current_info() {
    local current_branch=$(git branch --show-current 2>/dev/null)
    local current_commit=$(git rev-parse HEAD 2>/dev/null)
    echo "$current_branch|$current_commit"
}

# Function to truncate text
truncate_text() {
    local text="$1"
    local max_length="$2"
    if [ ${#text} -gt $max_length ]; then
        echo "${text:0:$((max_length-3))}..."
    else
        echo "$text"
    fi
}

# Function to draw header
draw_header() {
    local current_info=$1
    IFS='|' read -r current_branch current_commit <<< "$current_info"
    
    clear_screen
    
    # Determine current state
    local is_restored=false
    local original_branch=""
    local restored_commit_hash=""
    local restored_commit_msg=""
    
    if [ -f ".git/last_restore_info" ]; then
        is_restored=true
        local restore_info=$(cat .git/last_restore_info 2>/dev/null)
        original_branch=$(echo "$restore_info" | cut -d'|' -f1)
        restored_commit_hash=$(echo "$restore_info" | cut -d'|' -f2)
        # Get commit message for restored commit
        restored_commit_msg=$(git log -1 --pretty=format:"%s" "$restored_commit_hash" 2>/dev/null)
    fi
    
    # Header box
    echo -e "${BOLD}${MAGENTA}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    
    if [ "$is_restored" = true ]; then
        # State: Viewing a restored commit
        echo -e "${BOLD}${MAGENTA}‚îÇ${NC}  ${YELLOW}‚ö†Ô∏è  ${BOLD}${WHITE}TEMPORARY RESTORE MODE - You're exploring a past commit${NC}        ${BOLD}${MAGENTA}‚îÇ${NC}"
        echo -e "${BOLD}${MAGENTA}‚îÇ${NC}  ${GREEN}[a]${NC} Apply this commit to '${original_branch}' ${YELLOW}[u]${NC} Undo and return ${GRAY}[q]${NC} Quit     ${BOLD}${MAGENTA}‚îÇ${NC}"
    else
        # State: Browsing commits
        echo -e "${BOLD}${MAGENTA}‚îÇ${NC}  ${CYAN}üìã ${BOLD}${WHITE}COMMIT BROWSER - Navigate through git history${NC}                ${BOLD}${MAGENTA}‚îÇ${NC}"
        echo -e "${BOLD}${MAGENTA}‚îÇ${NC}  ${WHITE}‚Üë‚Üì${NC} Navigate ${GREEN}[Enter]${NC} Preview & Restore ${GRAY}[q]${NC} Quit                      ${BOLD}${MAGENTA}‚îÇ${NC}"
    fi
    
    echo -e "${BOLD}${MAGENTA}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    echo ""
    
    # Show current state info
    if [ "$is_restored" = true ]; then
        echo -e "${BOLD}${YELLOW}  ‚ö†Ô∏è  TEMPORARY STATE${NC}"
        echo -e "  ${WHITE}You restored to:${NC} ${CYAN}${restored_commit_msg}${NC}"
        echo -e "  ${WHITE}Original branch:${NC} ${GREEN}${original_branch}${NC} ${DIM}(unchanged)${NC}"
        echo ""
        echo -e "  ${WHITE}Choose an action:${NC}"
        echo -e "  ${GREEN}[a]${NC} Apply - Make '${original_branch}' point to this commit"
        echo -e "  ${YELLOW}[u]${NC} Undo  - Go back to '${original_branch}'"
        echo -e "  ${GRAY}[q]${NC} Quit  - Exit tool"
        echo ""
        echo -e "  ${DIM}Navigation disabled in temporary state${NC}"
    else
        echo -e "  ${WHITE}Branch:${NC} ${GREEN}${current_branch}${NC}"
        echo -e "  ${WHITE}HEAD:${NC} ${GRAY}${current_commit:0:7}${NC}"
        echo ""
        echo -e "${BOLD}${WHITE}Commits:${NC}"
    fi
    echo ""
}

# Function to draw commit list
draw_commits() {
    local commits="$1"
    local selected="$2"
    local current_commit="$3"
    local line_num=9
    
    local i=0
    while IFS='|' read -r full_hash short_hash message date author; do
        local relative_time=$(get_relative_time "$full_hash")
        local truncated_msg=$(truncate_text "$message" 50)
        local truncated_author=$(truncate_text "$author" 15)
        
        move_cursor $line_num 1
        
        # Determine styling
        local prefix="  "
        local commit_style=""
        local message_style=""
        
        # Check if we're in restored state
        local is_restored=false
        local restored_commit=""
        if [ -f ".git/last_restore_info" ]; then
            is_restored=true
            local restore_info=$(cat .git/last_restore_info 2>/dev/null)
            restored_commit=$(echo "$restore_info" | cut -d'|' -f2)
        fi
        
        # Set selection styling - only show selection arrow if NOT in restored state
        if [ "$is_restored" = false ] && [ $i -eq $selected ]; then
            prefix="${BOLD}${CYAN}${ARROW}${NC} "
            commit_style="${BOLD}${WHITE}"
            message_style="${BOLD}${YELLOW}"
        else
            prefix="  "
            commit_style="${GRAY}"
            message_style="${NC}"
        fi
        
        # Build the line
        local line=""
        
        # Add markers based on state
        if [ "$is_restored" = true ] && [ "$full_hash" = "$restored_commit" ]; then
            # Mark the currently restored commit with a clear indicator
            line="${prefix}${GREEN}‚óè${NC} "
            commit_style="${GREEN}${BOLD}"
            message_style="${GREEN}"
        else
            line="${prefix}  "
        fi
        
        # Add commit info
        line="${line} ${commit_style}${short_hash}${NC}"
        line="${line} ${message_style}${truncated_msg}${NC}"
        
        # Add metadata
        line="${line} ${DIM}${relative_time} ‚Ä¢ ${truncated_author}${NC}"
        
        # Clear line and print
        printf '\033[K'
        echo -e "$line"
        
        ((i++))
        ((line_num++))
    done <<< "$commits"
    
    # Clear remaining lines
    for ((j=line_num; j<=25; j++)); do
        move_cursor $j 1
        printf '\033[K'
    done
}

# Function to show commit details
show_commit_details() {
    local commit_hash=$1
    local short_hash=$2
    local message=$3
    local date=$4
    local author=$5
    
    clear_screen
    
    echo -e "${BOLD}${CYAN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${BOLD}${CYAN}‚îÇ${NC}  ${BOLD}${WHITE}üìã Commit Details${NC}                                                    ${BOLD}${CYAN}‚îÇ${NC}"
    echo -e "${BOLD}${CYAN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    echo ""
    
    echo -e "  ${BOLD}Hash:${NC}    ${YELLOW}${short_hash}${NC} (${GRAY}${commit_hash}${NC})"
    echo -e "  ${BOLD}Message:${NC} ${WHITE}${message}${NC}"
    echo -e "  ${BOLD}Date:${NC}    ${CYAN}${date}${NC}"
    echo -e "  ${BOLD}Author:${NC}  ${GREEN}${author}${NC}"
    echo ""
    
    # Show commit body if exists
    local body=$(git log -1 --format="%b" "$commit_hash" 2>/dev/null | sed '/^$/d')
    if [ -n "$body" ]; then
        echo -e "${BOLD}Extended message:${NC}"
        echo "$body" | sed 's/^/  /'
        echo ""
    fi
    
    # Show file changes
    echo -e "${BOLD}Files changed:${NC}"
    # Get all lines except the last one (summary line)
    local file_changes=$(git show --stat --format="" "$commit_hash" 2>/dev/null)
    local line_count=$(echo "$file_changes" | wc -l)
    if [ $line_count -gt 1 ]; then
        echo "$file_changes" | sed '$d' | sed 's/^/  /'
    fi
    echo ""
    
    # Show summary
    local summary=$(git show --stat --format="" "$commit_hash" 2>/dev/null | tail -1)
    if [ -n "$summary" ]; then
        echo -e "${BOLD}Summary:${NC} $summary"
        echo ""
    fi
    
    echo -e "${BOLD}${YELLOW}Do you want to restore to this commit? [y/N]${NC}"
    read -p "$(echo -e ${CYAN}Choice: ${NC})" choice
    
    if [[ $choice =~ ^[Yy]$ ]]; then
        perform_restore "$commit_hash" "$short_hash" "$message"
        return 0  # Indicate restore was performed
    else
        return 1  # Indicate restore was cancelled
    fi
}

# Function to handle uncommitted changes
handle_uncommitted_changes() {
    if ! git diff-index --quiet HEAD -- 2>/dev/null; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  Warning: You have uncommitted changes${NC}"
        echo -e "\nWhat would you like to do?"
        echo -e "${BOLD}1)${NC} Stash changes and continue"
        echo -e "${BOLD}2)${NC} Discard changes and continue"
        echo -e "${BOLD}3)${NC} Cancel restore"
        
        while true; do
            read -p "$(echo -e ${CYAN}Choice [1-3]: ${NC})" choice
            
            case $choice in
                1)
                    echo -e "\n${BLUE}Stashing changes...${NC}"
                    git stash push -m "Auto-stash before restore at $(date)"
                    echo -e "${GREEN}‚úì Changes stashed${NC}"
                    return 0
                    ;;
                2)
                    echo -e "\n${YELLOW}Are you sure you want to discard all changes? [y/N]${NC}"
                    read -p "" confirm
                    if [[ $confirm =~ ^[Yy]$ ]]; then
                        echo -e "${BLUE}Discarding changes...${NC}"
                        git reset --hard HEAD
                        git clean -fd
                        echo -e "${GREEN}‚úì Changes discarded${NC}"
                        return 0
                    fi
                    ;;
                3)
                    echo -e "${YELLOW}Restore cancelled${NC}"
                    return 1
                    ;;
                *)
                    echo -e "${RED}Invalid choice. Please select 1-3${NC}"
                    ;;
            esac
        done
    fi
    return 0
}

# Function to generate temporary branch name
generate_temp_branch_name() {
    echo "restore-temp-$(date +%s)"
}

# Function to clean up old temporary branches
cleanup_temp_branches() {
    local temp_branches=$(git branch | grep -E '^\s*restore-temp-' | sed 's/^[ *]*//')
    if [ -n "$temp_branches" ]; then
        echo -e "\n${YELLOW}Found old temporary restore branches:${NC}"
        echo "$temp_branches" | sed 's/^/  /'
        echo -e "\n${BOLD}Clean up old temporary branches? [y/N]${NC}"
        read -p "$(echo -e ${CYAN}Choice: ${NC})" choice
        if [[ $choice =~ ^[Yy]$ ]]; then
            echo "$temp_branches" | while read branch; do
                git branch -D "$branch" 2>/dev/null && echo -e "${GREEN}‚úì Deleted $branch${NC}"
            done
        fi
    fi
}

# Function to get original branch before restore
get_original_branch() {
    local current_branch=$(git branch --show-current 2>/dev/null)
    if [ -n "$current_branch" ]; then
        echo "$current_branch"
    else
        # If in detached HEAD, try to find the original branch
        local original_branch=$(git reflog --format='%gd %gs' | grep -E 'checkout: moving from' | head -1 | sed 's/.*checkout: moving from \([^ ]*\).*/\1/')
        echo "${original_branch:-master}"
    fi
}

# Function to undo last restore
undo_last_restore() {
    if [ ! -f ".git/last_restore_info" ]; then
        echo -e "${YELLOW}No previous restore to undo${NC}"
        return 1
    fi
    
    local restore_info=$(cat .git/last_restore_info)
    IFS='|' read -r original_branch commit_hash temp_branch <<< "$restore_info"
    
    echo -e "\n${BLUE}Returning to original branch...${NC}"
    
    if git checkout "$original_branch" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Successfully returned to '${original_branch}'${NC}"
        
        # Clean up temporary branch
        if [ -n "$temp_branch" ] && git branch | grep -q "$temp_branch"; then
            git branch -D "$temp_branch" 2>/dev/null
        fi
        
        # Remove restore info
        rm -f .git/last_restore_info
        
        return 0
    else
        echo -e "${RED}Error: Failed to return to branch ${original_branch}${NC}"
        return 1
    fi
}

# Function to adopt current commit as new HEAD of original branch
adopt_current_commit() {
    if [ ! -f ".git/last_restore_info" ]; then
        echo -e "${RED}Error: No restore info found${NC}"
        return 1
    fi
    
    local restore_info=$(cat .git/last_restore_info 2>/dev/null)
    local original_branch=$(echo "$restore_info" | cut -d'|' -f1)
    local current_commit=$(echo "$restore_info" | cut -d'|' -f2)
    local temp_branch=$(echo "$restore_info" | cut -d'|' -f3)
    
    # Get commit message for clarity
    local commit_msg=$(git log -1 --pretty=format:"%s" "$current_commit" 2>/dev/null)
    
    echo -e "${YELLOW}‚ö†Ô∏è  ${BOLD}Make this commit permanent?${NC}"
    echo ""
    echo -e "${WHITE}This will move '${CYAN}${original_branch}${NC}' to:${NC}"
    echo -e "  ${GREEN}‚Üí${NC} ${CYAN}${commit_msg}${NC}"
    echo ""
    echo -e "${RED}WARNING:${NC} Any commits after this point will be lost"
    echo ""
    read -p "Continue? (yes/no): " -r confirm
    
    if [[ $confirm != "yes" ]]; then
        echo -e "${GRAY}Operation cancelled${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}Applying changes...${NC}"
    
    # Switch to original branch
    if git checkout "$original_branch" 2>/dev/null; then
        # Reset to the desired commit (hard reset)
        if git reset --hard "$current_commit" 2>/dev/null; then
            echo -e "${GREEN}‚úì Done! Branch '${original_branch}' is now at: ${commit_msg}${NC}"
            
            # Clean up temp branch
            if [ -n "$temp_branch" ] && git branch | grep -q "$temp_branch"; then
                git branch -D "$temp_branch" 2>/dev/null
            fi
            
            # Remove restore info
            rm -f .git/last_restore_info
            
            echo -e "${GREEN}‚úì Successfully applied${NC}"
            return 0
        else
            echo -e "${RED}Error: Failed to apply changes${NC}"
            return 1
        fi
    else
        echo -e "${RED}Error: Failed to switch to branch ${original_branch}${NC}"
        return 1
    fi
}

# Function to perform restore
perform_restore() {
    local commit_hash=$1
    local short_hash=$2
    local message=$3
    
    echo -e "\n${BLUE}Restoring...${NC}"
    
    # Handle uncommitted changes
    if ! handle_uncommitted_changes; then
        return 1
    fi
    
    # Get original branch info
    local original_branch=$(get_original_branch)
    local temp_branch=$(generate_temp_branch_name)
    
    # Create and checkout temporary branch
    if git checkout -b "$temp_branch" "$commit_hash" 2>/dev/null; then
        clear_screen
        echo -e "${GREEN}‚úÖ ${BOLD}Restore successful!${NC}"
        echo ""
        echo -e "${WHITE}You're now viewing:${NC}"
        echo -e "  ${CYAN}${message}${NC}"
        echo ""
        echo -e "${WHITE}You can now:${NC}"
        echo -e "  ‚Ä¢ Explore the code at this point in time"
        echo -e "  ‚Ä¢ Run ${CYAN}restore${NC} again to browse more commits"
        echo -e "  ‚Ä¢ Press ${GREEN}'a'${NC} in restore to make this permanent"
        echo -e "  ‚Ä¢ Press ${YELLOW}'u'${NC} in restore to return without changes"
        echo ""
        
        # Offer cleanup of old temp branches
        cleanup_temp_branches
        
        # Save restore info for potential undo
        echo "${original_branch}|${commit_hash}|${temp_branch}" > .git/last_restore_info 2>/dev/null
        
    else
        echo -e "${RED}Error: Failed to restore commit${NC}"
        return 1
    fi
}

# Main interactive function
main() {
    # Check for version flag
    if [[ "$1" == "--version" ]] || [[ "$1" == "-v" ]]; then
        echo "restore version 1.1.1"
        exit 0
    fi
    
    # Check for help flag
    if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        echo "restore - Interactive Git save point browser"
        echo ""
        echo "Usage: restore [options]"
        echo ""
        echo "Options:"
        echo "  -v, --version    Show version information"
        echo "  -h, --help       Show this help message"
        echo ""
        echo "Run 'restore' without options to start the interactive browser"
        exit 0
    fi
    
    check_git_repo
    
    # Get commit data
    local commits=$(get_commits)
    local current_info=$(get_current_info)
    IFS='|' read -r current_branch current_commit <<< "$current_info"
    
    if [ -z "$commits" ]; then
        echo -e "${YELLOW}No commits found.${NC}"
        exit 0
    fi
    
    # Convert commits to array
    local commit_array=()
    while IFS='|' read -r line; do
        commit_array+=("$line")
    done <<< "$commits"
    
    local selected=0
    local total=${#commit_array[@]}
    
    # Hide cursor and disable echo
    hide_cursor
    stty -echo
    
    # Initial draw
    draw_header "$current_info"
    draw_commits "$commits" "$selected" "$current_commit"
    
    # Main loop
    while true; do
        # Read single character
        read -rsn1 key
        
        # Check if we're in restored state
        local in_restored_state=false
        if [ -f ".git/last_restore_info" ]; then
            in_restored_state=true
        fi
        
        case $key in
            $'\x1b')  # ESC sequence
                if [ "$in_restored_state" = false ]; then
                    read -rsn2 -t 1 rest
                    case $rest in
                        '[A')  # Up arrow
                            if [ $selected -gt 0 ]; then
                                ((selected--))
                                draw_commits "$commits" "$selected" "$current_commit"
                            fi
                            ;;
                        '[B')  # Down arrow
                            if [ $selected -lt $((total-1)) ]; then
                                ((selected++))
                                draw_commits "$commits" "$selected" "$current_commit"
                            fi
                            ;;
                    esac
                fi
                ;;
            '')  # Enter key
                if [ "$in_restored_state" = false ]; then
                    # Get selected commit data
                    local selected_commit="${commit_array[$selected]}"
                    IFS='|' read -r full_hash short_hash message date author <<< "$selected_commit"
                    
                    show_cursor
                    stty echo
                    show_commit_details "$full_hash" "$short_hash" "$message" "$date" "$author"
                    
                    if [ $? -eq 0 ]; then
                        # Restore was performed, refresh everything
                        echo -e "\n${CYAN}Entering temporary restore mode...${NC}"
                        sleep 2
                        
                        # Refresh data after restore
                        commits=$(get_commits)
                        current_info=$(get_current_info)
                        commit_array=()
                        while IFS='|' read -r line; do
                            commit_array+=("$line")
                        done <<< "$commits"
                        total=${#commit_array[@]}
                        selected=0
                    fi
                    
                    # Re-hide cursor and disable echo
                    hide_cursor
                    stty -echo
                    
                    # Redraw interface
                    draw_header "$current_info"
                    draw_commits "$commits" "$selected" "$current_commit"
                fi
                ;;
            'a'|'A')  # Adopt current commit
                if [ -f ".git/last_restore_info" ]; then
                    show_cursor
                    stty echo
                    adopt_current_commit
                    if [ $? -eq 0 ]; then
                        # After successful adoption, refresh the state and continue
                        echo -e "\n${CYAN}Refreshing commit list...${NC}"
                        sleep 1
                        # Get updated commit data and current info
                        commits=$(get_commits)
                        current_info=$(get_current_info)
                        # Convert commits to array again
                        commit_array=()
                        while IFS='|' read -r line; do
                            commit_array+=("$line")
                        done <<< "$commits"
                        total=${#commit_array[@]}
                        selected=0
                    else
                        read -p "Press Enter to continue..." -r
                    fi
                    hide_cursor
                    stty -echo
                    draw_header "$current_info"
                    draw_commits "$commits" "$selected" "$current_commit"
                fi
                ;;
            'u'|'U')  # Undo last restore
                show_cursor
                stty echo
                undo_last_restore
                if [ $? -eq 0 ]; then
                    # After successful undo, refresh the state and continue
                    echo -e "\n${CYAN}Refreshing commit list...${NC}"
                    sleep 1
                    # Get updated commit data and current info
                    commits=$(get_commits)
                    current_info=$(get_current_info)
                    # Convert commits to array again
                    commit_array=()
                    while IFS='|' read -r line; do
                        commit_array+=("$line")
                    done <<< "$commits"
                    total=${#commit_array[@]}
                    selected=0
                else
                    read -p "Press Enter to continue..." -r
                fi
                hide_cursor
                stty -echo
                draw_header "$current_info"
                draw_commits "$commits" "$selected" "$current_commit"
                ;;
            'q'|'Q')  # Quit
                break
                ;;
        esac
    done
    
    # Cleanup
    show_cursor
    stty echo
    echo -e "\n${YELLOW}Exiting...${NC}"
}

# Run main function with all arguments
main "$@"