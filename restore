#!/bin/bash

# Claude Restore Tool - Interactive Git Save Point Manager
# Author: Claude Assistant
# Description: Interactive tool for managing and restoring git save points

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'
DIM='\033[2m'

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
}

# Function to get all save points
get_saves() {
    git log --grep="\[SAVE #" --format="%h|%s|%ad|%H" --date=format:"%Y-%m-%d %H:%M" 2>/dev/null
}

# Function to show file changes for a commit
show_commit_details() {
    local commit_hash=$1
    local save_num=$2
    local description=$3
    local date=$4
    
    echo -e "\n${BOLD}${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BOLD}üìå SAVE #${save_num}${NC} - ${description}"
    echo -e "${DIM}Commit: ${commit_hash} | Date: ${date}${NC}"
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
    
    # Show commit message body if exists
    local body=$(git log -1 --format="%b" "$commit_hash" 2>/dev/null | sed '/^$/d')
    if [ -n "$body" ]; then
        echo -e "${BOLD}üìù Commit details:${NC}"
        echo "$body" | sed 's/^/   /'
        echo ""
    fi
    
    # Show file changes
    echo -e "${BOLD}üìÑ Files changed:${NC}"
    git show --stat --format="" "$commit_hash" 2>/dev/null | head -n -1 | sed 's/^/   /'
    
    # Show summary
    local summary=$(git show --stat --format="" "$commit_hash" 2>/dev/null | tail -1)
    echo -e "\n${BOLD}üìä Summary:${NC} $summary"
    
    # Show diff preview (first 20 lines)
    echo -e "\n${BOLD}üîç Change preview:${NC}"
    git show --format="" --color=always "$commit_hash" 2>/dev/null | head -20 | sed 's/^/   /'
    echo -e "   ${DIM}... (preview limited to 20 lines)${NC}"
}

# Function to handle uncommitted changes
handle_uncommitted_changes() {
    if ! git diff-index --quiet HEAD -- 2>/dev/null; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  Warning: You have uncommitted changes${NC}"
        echo -e "\nWhat would you like to do?"
        echo -e "${BOLD}1)${NC} Stash changes and continue"
        echo -e "${BOLD}2)${NC} Discard changes and continue"
        echo -e "${BOLD}3)${NC} Cancel restore"
        echo -e "${BOLD}4)${NC} View uncommitted changes"
        
        while true; do
            read -p "$(echo -e ${CYAN}Choice [1-4]: ${NC})" choice
            
            case $choice in
                1)
                    echo -e "\n${BLUE}Stashing changes...${NC}"
                    git stash push -m "Auto-stash before restore at $(date)"
                    echo -e "${GREEN}‚úì Changes stashed${NC}"
                    return 0
                    ;;
                2)
                    echo -e "\n${YELLOW}Are you sure you want to discard all changes? [y/N]${NC}"
                    read -p "" confirm
                    if [[ $confirm =~ ^[Yy]$ ]]; then
                        echo -e "${BLUE}Discarding changes...${NC}"
                        git reset --hard HEAD
                        git clean -fd
                        echo -e "${GREEN}‚úì Changes discarded${NC}"
                        return 0
                    else
                        echo "Continuing to menu..."
                        continue
                    fi
                    ;;
                3)
                    echo -e "${YELLOW}Restore cancelled${NC}"
                    return 1
                    ;;
                4)
                    echo -e "\n${BOLD}Uncommitted changes:${NC}"
                    git status --short
                    echo -e "\n${BOLD}Diff preview:${NC}"
                    git diff --color=always | head -30
                    echo -e "${DIM}... (preview limited to 30 lines)${NC}\n"
                    ;;
                *)
                    echo -e "${RED}Invalid choice. Please select 1-4${NC}"
                    ;;
            esac
        done
    fi
    return 0
}

# Function to perform restore
perform_restore() {
    local commit_hash=$1
    local save_num=$2
    local description=$3
    
    echo -e "\n${BLUE}Restoring to SAVE #${save_num}...${NC}"
    
    if git checkout "$commit_hash" 2>/dev/null; then
        echo -e "\n${GREEN}‚úÖ Successfully restored to SAVE #${save_num}${NC}"
        echo -e "${GREEN}üìù ${description}${NC}"
        echo -e "\nCurrent position: ${BOLD}$(git rev-parse --short HEAD)${NC}"
        echo -e "\n${YELLOW}Note:${NC} You are now in 'detached HEAD' state."
        echo -e "To create a new branch: ${CYAN}git checkout -b <branch-name>${NC}"
        echo -e "To return to main/master: ${CYAN}git checkout main${NC} (or master)"
    else
        echo -e "${RED}Error: Failed to restore${NC}"
        return 1
    fi
}

# Main interactive function
main() {
    check_git_repo
    
    # Get current branch and commit
    local current_branch=$(git branch --show-current 2>/dev/null)
    local current_commit=$(git rev-parse --short HEAD 2>/dev/null)
    
    echo -e "${BOLD}${MAGENTA}üîÑ Claude Restore Tool${NC}"
    echo -e "${DIM}Interactive Git Save Point Manager${NC}\n"
    
    echo -e "Current branch: ${CYAN}${current_branch:-'(detached HEAD)'}${NC}"
    echo -e "Current commit: ${CYAN}${current_commit}${NC}\n"
    
    # Get all saves
    local saves=$(get_saves)
    
    if [ -z "$saves" ]; then
        echo -e "${YELLOW}No save points found.${NC}"
        echo -e "Create saves with: ${CYAN}git commit -m \"[SAVE #1] Description\"${NC}"
        exit 0
    fi
    
    # Build menu
    echo -e "${BOLD}Available Save Points:${NC}\n"
    
    declare -A save_map
    local i=1
    
    while IFS='|' read -r short_hash message date full_hash; do
        local save_num=$(echo "$message" | grep -o '\[SAVE #[0-9]\+\]' | grep -o '[0-9]\+')
        local description=$(echo "$message" | sed 's/\[SAVE #[0-9]\+\] //')
        
        # Store in map
        save_map[$i]="$full_hash|$save_num|$description|$date"
        
        # Display menu item
        echo -n -e "${BOLD}${i})${NC} SAVE #${save_num} - ${description}"
        
        # Mark current commit
        if [ "$short_hash" = "$current_commit" ]; then
            echo -e " ${GREEN}‚Üê CURRENT${NC}"
        else
            echo ""
        fi
        
        echo -e "   ${DIM}${date} | ${short_hash}${NC}"
        
        ((i++))
    done <<< "$saves"
    
    echo -e "\n${BOLD}0)${NC} Exit"
    
    # Get user choice
    while true; do
        echo ""
        read -p "$(echo -e ${CYAN}Select save point to view [0-$((i-1))]: ${NC})" choice
        
        if [[ "$choice" == "0" ]]; then
            echo -e "${YELLOW}Exiting...${NC}"
            exit 0
        elif [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -lt "$i" ]; then
            # Valid choice
            IFS='|' read -r commit_hash save_num description date <<< "${save_map[$choice]}"
            
            # Show details
            show_commit_details "$commit_hash" "$save_num" "$description" "$date"
            
            # Confirm restore
            echo -e "\n${BOLD}Do you want to restore to this save point?${NC}"
            echo -e "${YELLOW}Warning: This will change your working directory${NC}"
            read -p "$(echo -e ${CYAN}Restore? [y/N]: ${NC})" confirm
            
            if [[ $confirm =~ ^[Yy]$ ]]; then
                # Handle uncommitted changes
                if handle_uncommitted_changes; then
                    perform_restore "$commit_hash" "$save_num" "$description"
                    exit 0
                fi
            else
                echo -e "\n${YELLOW}Restore cancelled. Returning to menu...${NC}"
            fi
        else
            echo -e "${RED}Invalid choice. Please select 0-$((i-1))${NC}"
        fi
    done
}

# Run main function
main